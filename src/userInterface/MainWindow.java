/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface;

import computerGraphics.Bezier_Cubica;
import computerGraphics.B_Spline_Cubica;
import computerGraphics.B_Spline_Quadratica;
import computerGraphics.Circle;
import computerGraphics.GraphicComponent;
import computerGraphics.Hermite;
import computerGraphics.Line;
import computerGraphics.Point;
import computerGraphics.Surface;
import computerGraphics.Tools;
import controllers.ComponentController;
import controllers.ToolController;
import file.NewFileWindow;
import file.OpenFileWindow;
import file.SaveFile;
import java.awt.Dimension;
import java.awt.event.MouseEvent;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import listeners.CanvasListener;
import listeners.PropertiesListener;

/**
 *
 * @author Elias
 */
public class MainWindow extends javax.swing.JFrame implements PropertiesListener, CanvasListener {

    private Canvas canvas;
    private ComponentController cController = new ComponentController();
    private WindowProperties wp;
    String fileName;
    private String title = "APEGraphics";

    /**
     * Creates new form NovoJFrame
     */
    public MainWindow() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    public MainWindow(double xMin, double xMax, double yMin, double yMax, double width, double height) {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        //////Adequando o tamanho do canvas a escala
        NumberFormat formatter = new DecimalFormat("0.0000");
        double canvasScale = height / width;
        double realScale = (yMax - yMin) / (xMax - xMin);
        canvasScale = Double.parseDouble(formatter.format(canvasScale).replace(',', '.'));
        realScale = Double.parseDouble(formatter.format(realScale).replace(',', '.'));

        while (canvasScale != realScale) {
            if (canvasScale > realScale) {
                height--;
            } else {
                width--;
            }
            canvasScale = height / width;
            canvasScale = Double.parseDouble(formatter.format(canvasScale).replace(',', '.'));

        }

        canvas = new Canvas(xMin, xMax, yMin, yMax, (int) width, (int) height);
        canvas.setPreferredSize(new Dimension((int) width, (int) height));
        jPanel5.add(canvas, new java.awt.GridBagConstraints());
        //////

        PanelTest panelTest = new PanelTest();

        //
        //Tool Controller
        ToolController tController = new ToolController();
        Tool tools[] = new Tool[Tools.values().length];
        String nome = null;
        int i = 0;
        for (Tools tool : Tools.values()) {
            tools[i] = new Tool(tool.name());
            tools[i].addListener(tController);
            tController.addListener(tools[i]);
            jPanel2.add(tools[i]);
            i++;
        }
        tController.addListener(canvas);
        tController.addListener(panelTest);
        //Window Properties
        wp = new WindowProperties(xMin, xMax, yMin, yMax, (int) width, (int) height);
        jPanel6.add(wp);
        canvas.addListener(wp);
        wp.addListener(canvas);
        wp.addListener(this);
        //

        //Components
        //jPanel4.setLayout(new java.awt.GridLayout(0, 1));        
        canvas.addListener(this);
        cController.addListener(canvas);
        canvas.addListener(cController);
        //jPanel4.removeAll();
        //canvas.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("APEGraphics");
        setMinimumSize(new java.awt.Dimension(534, 343));
        setSize(new java.awt.Dimension(534, 324));

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));
        jPanel3.setMinimumSize(new java.awt.Dimension(534, 324));

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));
        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Components", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel8.setMinimumSize(new java.awt.Dimension(132, 194));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(102, 102, 102));
        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));
        jPanel4.setLayout(new java.awt.GridLayout(0, 1));
        jScrollPane1.setViewportView(jPanel4);

        jPanel8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tools", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setLayout(new java.awt.GridLayout(20, 0));

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Window Properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNew.setText("New File");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        jMenu1.add(miNew);

        miOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miOpen.setText("Open File");
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        jMenu1.add(miOpen);

        miSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        miSave.setText("Save File");
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        jMenu1.add(miSave);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
        // TODO add your handling code here:
//        ArrayList<GraphicComponent> components = OpenFile.open(wp, fileName);        
//        components.stream().forEach((component) -> {
//            canvas.addComponent(component);
//        });
        OpenFileWindow a = new OpenFileWindow(this, true, this, wp);
        a.setVisible(true);
    }//GEN-LAST:event_miOpenActionPerformed

    private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
        // TODO add your handling code here:        
        SaveFile.save(canvas, fileName);
        JOptionPane.showMessageDialog(this, "File Saved");
    }//GEN-LAST:event_miSaveActionPerformed

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        // TODO add your handling code here:
        NewFileWindow nv = new NewFileWindow(this, true, this);
        nv.setVisible(true);
    }//GEN-LAST:event_miNewActionPerformed

    public void newFile(String newDirectory, String newName, double xMin, double yMin, double xMax, double yMax, int width, int height) {
        this.fileName = newDirectory + newName + ".cg1";
        this.setTitle(this.title + " - " + this.fileName);

        wp.changedNewFile(xMin, yMin, xMax, yMax, width, height);
        canvas.setVisible(true);
    }

    public void openFile(ArrayList<GraphicComponent> components, String fileName) {
        this.fileName = fileName;
        this.setTitle(this.title + " - " + this.fileName);

        canvas.removeAll();

        components.stream().forEach((component) -> {
            canvas.addComponent(component);
        });
        canvas.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miSave;
    // End of variables declaration//GEN-END:variables

    @Override
    public void limitsChanged(double xMin, double yMin, double xMax, double yMax) {

    }

    @Override
    public void sizeChanged(int width, int height) {
        canvas.setPreferredSize(new Dimension(width, height));
        jPanel5.add(canvas, new java.awt.GridBagConstraints());
    }

    @Override
    public void mouseClicked(MouseEvent evt) {

    }

    @Override
    public void mouseMoved(MouseEvent evt) {

    }

    @Override
    public void mouseMovedReal(double x, double y) {

    }

    @Override
    public void mouseDragged(double deltaX, double deltaY) {

    }

    @Override
    public void mouseWheelMoved(double deltaX, double deltaY) {

    }

    @Override
    public void componentAdded(int i) {
        //jPanel4.removeAll();
        GraphicComponent component = canvas.getGraphicComponents().get(i);

        switch (component.getType()) {
            case "Point":
                Point p = (Point) component;
                ComponentIcon pc = new ComponentIcon(i, component);
                //pc.addListener(canvas);                
                jPanel4.add(pc);

                //Component Controller                
                cController.addListener(pc);
                pc.addListener(cController);

                break;
            case "Circle":
                Circle c = (Circle) component;
                ComponentIcon cc = new ComponentIcon(i, component);
                //cc.addListener(canvas);
                jPanel4.add(cc);

                //Component Controller                
                cController.addListener(cc);
                cc.addListener(cController);

                break;
            case "Line":
                Line l = (Line) component;
                ComponentIcon lc = new ComponentIcon(i, component);
                //lc.addListener(canvas);
                jPanel4.add(lc);

                //Component Controller
                cController.addListener(lc);
                lc.addListener(cController);
                break;
            case "Bezier":
                Bezier_Cubica b = (Bezier_Cubica) component;
                ComponentIcon bc = new ComponentIcon(i, component);
                //bc.addListener(canvas);
                jPanel4.add(bc);

                //Component Controller
                cController.addListener(bc);
                bc.addListener(cController);
                break;
            case "Hermite":
                Hermite h = (Hermite) component;
                ComponentIcon hc = new ComponentIcon(i, component);
                //hc.addListener(canvas);
                jPanel4.add(hc);

                //Component Controller
                cController.addListener(hc);
                hc.addListener(cController);
                break;
            case "B_Spline_C":
                B_Spline_Cubica bs = (B_Spline_Cubica) component;
                ComponentIcon bsc = new ComponentIcon(i, component);
                //hc.addListener(canvas);
                jPanel4.add(bsc);

                //Component Controller
                cController.addListener(bsc);
                bsc.addListener(cController);
                break;
            case "B_Spline_Q":
                B_Spline_Quadratica bq = (B_Spline_Quadratica) component;
                ComponentIcon bqc = new ComponentIcon(i, component);
                //hc.addListener(canvas);
                jPanel4.add(bqc);

                //Component Controller
                cController.addListener(bqc);
                bqc.addListener(cController);
                break;
            case "TS_BSQ":
                Surface tsbsq = (Surface) component;
                ComponentIcon tsbqc = new ComponentIcon(i, component);
                //hc.addListener(canvas);
                jPanel4.add(tsbqc);

                //Component Controller
                cController.addListener(tsbqc);
                tsbqc.addListener(cController);
                break;
        }

        jPanel4.revalidate();
        jScrollPane1.setViewportView(jPanel4);
    }

    @Override
    public void componentRemovedCanvas(int i) {
        jPanel4.remove(i);
        jPanel4.revalidate();
        jScrollPane1.setViewportView(jPanel4);
    }

    @Override
    public void pointClicked(int id) {

    }

    @Override
    public void mouseDraggedToComponent() {

    }

    @Override
    public void lightChanged() {
        
    }
}
